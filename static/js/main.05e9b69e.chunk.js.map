{"version":3,"sources":["components/Header/Header.js","components/Result/Result.js","components/Form/Form.js","App.js","serviceWorker.js","index.js"],"names":["Header","Result","props","state","weatherData","this","setState","console","log","weatherDat","Component","Form","handleLatChanges","event","lat","target","value","preventDefault","handleLngChanges","lng","handleSubmit","axios","get","then","response","forecast","data","catch","error","errorMsg","onSubmit","htmlFor","type","onChange","App","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"oQAKeA,G,kBAHA,kBAAO,6C,oDC0BPC,E,YAzBX,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KACDC,MAAQ,CACTC,YAAc,IAHH,E,iFAQfC,KAAKC,SAAS,CACVF,YAAaC,KAAKH,MAAME,gBAE5BG,QAAQC,IAAIH,KAAKF,MAAMM,c,+BAGvB,OAKJ,kC,GApBiBC,aCiENC,E,YA9DX,WAAYT,GAAQ,IAAD,8BACf,4CAAMA,KAUVU,iBAAmB,SAACC,GACb,EAAKP,SAAS,CACbQ,IAAMD,EAAME,OAAOC,QAEpBH,EAAMI,kBAfM,EAiBnBC,iBAAmB,SAACL,GAChB,EAAKP,SAAS,CACVa,IAAKN,EAAME,OAAOC,QAEtBH,EAAMI,kBArBS,EAuBnBG,aAAe,SAACP,EAAOC,EAAKK,GACxBE,IAAMC,IAAI,qEAAuER,EAAM,IAAMK,EAAK,KACjGI,MACG,SAAAC,GACA,EAAKlB,SAAS,CAACmB,SAAUD,EAASE,OAClCnB,QAAQC,IAAI,EAAKL,MAAMsB,aAG1BE,OACG,SAAAC,GAAK,OAAI,EAAKtB,SAAS,CAAEuB,SAAUD,OAGvCf,EAAMI,kBAjCN,EAAKd,MAAQ,CACTW,IAAK,GACLK,IAAK,GACLM,SAAU,GACVI,SAAU,IANC,E,sEAsCT,IAAD,OAEL,OACQ,6BACI,0BAAOC,SAAa,WAAQ,EAAKV,aAAa,EAAKjB,MAAMW,IAAK,EAAKX,MAAMgB,OACrE,6BACI,2BAAOY,QAAU,OAAjB,KACA,2BAAOC,KAAK,OAAOhB,MAAOX,KAAKF,MAAMW,IAAKmB,SAAU5B,KAAKO,oBAE7D,6BACI,2BAAOmB,QAAU,OAAjB,KACA,2BAAOC,KAAK,OAAOhB,MAAOX,KAAKF,MAAMgB,IAAKc,SAAU5B,KAAKa,oBAE7D,6BACI,4BAAQc,KAAK,UAAb,iBAGR,kBAAE,EAAF,CAAS5B,YAAgBC,KAAKe,oB,GAxD/BV,aCWJwB,MATf,WACE,OACE,yBAAKC,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,QCEcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMxB,MAAK,SAAAyB,GACjCA,EAAaC,kB","file":"static/js/main.05e9b69e.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Header.css';\r\nconst Header = () =>  <h1>Weather App</h1>\r\n\r\n\r\nexport default Header","import React, { Component } from 'react';\r\n\r\nclass Result extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = { \r\n            weatherData : []\r\n        }\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.setState({\r\n            weatherData: this.props.weatherData()\r\n        })\r\n        console.log(this.state.weatherDat)\r\n    }\r\n    render(){\r\n        return (\r\n            // this.state.weatherData.map((item, index) => {\r\n            //    return <p key={index}> {item} </p>\r\n\r\n            // })\r\n    <div />            \r\n        )\r\n    }\r\n    \r\n}\r\n\r\nexport default Result","import React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport Result from '../Result/Result';\r\n\r\nclass Form extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            lat: '',\r\n            lng: '',\r\n            forecast: [],\r\n            errorMsg: ''\r\n        }\r\n    }\r\n        \r\n\r\n    handleLatChanges = (event) => {\r\n           this.setState({\r\n            lat : event.target.value\r\n           }) \r\n           event.preventDefault(); \r\n    }\r\n    handleLngChanges = (event) => {\r\n        this.setState({\r\n            lng: event.target.value\r\n        })\r\n        event.preventDefault();\r\n    }\r\n    handleSubmit = (event, lat, lng) => {\r\n        axios.get('https://api.darksky.net/forecast/1141ccf047d614284a0674902bc3c89f/' + lat + ',' + lng +'/')\r\n        .then(\r\n            response => {\r\n            this.setState({forecast: response.data});\r\n            console.log(this.state.forecast);\r\n            }\r\n        )\r\n        .catch(\r\n            error => this.setState({ errorMsg: error })\r\n        );\r\n        \r\n        event.preventDefault()\r\n    }\r\n\r\n    render (){\r\n\r\n        return(\r\n                <div>\r\n                    < form onSubmit = { () => { this.handleSubmit(this.state.lat, this.state.lng) } } >\r\n                        <div>\r\n                            <label htmlFor = \"lat\" > </label>\r\n                            <input type=\"text\" value={this.state.lat} onChange={this.handleLatChanges} />\r\n                        </div>\r\n                        <div>\r\n                            <label htmlFor = \"lng\" > </label>\r\n                            <input type=\"text\" value={this.state.lng} onChange={this.handleLngChanges} />\r\n                        </div>\r\n                        <div>\r\n                            <button type=\"submit\">Get Weather</button>\r\n                        </div>\r\n                    </form>\r\n                    < Result weatherData = { this.handleSubmit }/>\r\n                </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default Form","import React from 'react';\n// import logo from './logo.svg';\nimport './App.css';\nimport Header from './components/Header/Header';\nimport Form from './components/Form/Form';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <Form />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}