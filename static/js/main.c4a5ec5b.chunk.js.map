{"version":3,"sources":["components/Header/Header.js","components/Currently/Currently.js","components/Daily/Daily.js","components/Hourly/Hourly.js","components/Weather/Weather.js","components/Home/Home.js","App.js","serviceWorker.js","index.js"],"names":["Header","Currently","props","forecast_currently","console","log","className","src","icon","alt","width","summary","Hourly","forecast_daily","data","map","item","index","key","duration","time","Date","toDateString","split","forecast_hourly","h","Math","floor","getHour","Weather","getWeather","lat","lng","Axios","get","then","response","setState","forecast","catch","err","errmsg","state","this","currently","daily","hourly","Component","Home","handelAddressChange","event","addressVal","target","value","viewWeatherComponent","getLatLng","address","results","geometry","location","error","errMsg","htmlFor","name","id","onChange","type","onClick","App","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c4a5ec5b.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Header.css';\r\nconst Header = () =>  <h1>Weather App</h1>\r\n\r\n\r\nexport default Header","import React from 'react'\r\nimport './Currently.css';\r\n\r\nconst Currently = (props) => {\r\n  const {forecast_currently} = props\r\n   \r\n  if (forecast_currently) console.log((forecast_currently))\r\n\r\n  if (forecast_currently) {\r\n    \r\n    return (\r\n        <div className=\"currently\">\r\n            <h2> Currently </h2>\r\n            <img src={`images/${forecast_currently.icon}.jpg`} alt=\"icon\" width=\"150\" />\r\n            <p> {forecast_currently.summary} - {forecast_currently.icon}</p>\r\n        </div>\r\n    ) \r\n  } else return (\r\n    <div className=\"currently\">\r\n      <h2> Currently </h2>\r\n      <p> No Data </p>\r\n    </div>\r\n  )\r\n  \r\n}\r\n\r\n\r\nexport default Currently","import React from 'react'\r\nimport './Daily.css';\r\n\r\nconst Hourly = (props) => {\r\n  const {forecast_daily} = props\r\n   \r\n  if (forecast_daily) console.log((forecast_daily.data))\r\n\r\n  if (forecast_daily) {\r\n    \r\n    return (\r\n        < div className = \"hourly\" >\r\n          <h2>Daily</h2>\r\n        {\r\n          forecast_daily.data.map((item, index)=>{\r\n            return (\r\n              <div className=\"daily-tile\" key={index}>\r\n                <img src={`images/${item.icon}.jpg`} alt=\"icon\" width=\"100\" />\r\n                <p> {getDay(item.time)}\r\n                  - {item.summary} </p> \r\n               </div>\r\n            )\r\n          })\r\n        }\r\n        <div className=\"clear\"> </div>\r\n        </div>\r\n    )\r\n  } else return (\r\n    <div className = \"hourly\" >\r\n      <h2> Daily </h2>\r\n      <p> No Data </p>\r\n    </div>\r\n  )\r\n  \r\n}\r\n\r\nfunction getDay (duration) {\r\n  var d = new Date(duration*1000)\r\n  return d.toDateString().split(' ')[0]\r\n}\r\n\r\n\r\nexport default Hourly","import React from 'react'\r\nimport './Hourly.css';\r\n\r\nconst Hourly = (props) =>  {\r\n  const {forecast_hourly} = props\r\n   \r\n  if (forecast_hourly) console.log((forecast_hourly.data))\r\n\r\n  if (forecast_hourly) {\r\n    \r\n    return (\r\n      <div className=\"hourly\">\r\n          <h2> Hourly</h2>\r\n        {\r\n          forecast_hourly.data.map((item, index)=>{\r\n            return (\r\n              <div className=\"hourly-tile\" key={index}>\r\n                <p>\r\n                  {getHour(item.time)}:00\r\n                  <img src={`images/${item.icon}.jpg`} alt=\"icon\" width=\"50\" />\r\n                  {item.summary}\r\n                </p>\r\n              </div>\r\n            ) \r\n          })\r\n        }\r\n        <div className=\"clear\"></div>\r\n        </div>\r\n        \r\n    )\r\n  } else return (\r\n    <div className=\"hourly\">\r\n      <h2> Hourly </h2>\r\n      <p> No Data </p>\r\n    </div>\r\n  )\r\n  \r\n}\r\n\r\nfunction getHour (duration) {\r\n  var h = Math.floor(duration / (60 * 60) % 24)\r\n  return h < 10? '0'+h : h\r\n}\r\n\r\n\r\nexport default Hourly","import React, { Component } from 'react'\r\nimport './Weather.css';\r\nimport Currently from '../Currently/Currently';              \r\nimport Daily from '../Daily/Daily';              \r\nimport Hourly from '../Hourly/Hourly';           \r\nimport Axios from 'axios';\r\nclass Weather extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n    \r\n        this.state = {\r\n            forecast: [],\r\n            errmsg: ''\r\n        }\r\n    }\r\n    \r\n    componentDidMount(){\r\n        this.getWeather(this.props.lat, this.props.lng);\r\n    }\r\n    getWeather = (lat, lng) => {\r\n        Axios.get('https://api.darksky.net/forecast/1141ccf047d614284a0674902bc3c89f/'+lat+','+lng +'/')\r\n        .then(\r\n            (response) => {\r\n                this.setState({forecast : response.data})\r\n                console.log(response.data)\r\n            }\r\n        ).catch(\r\n            (err) => {\r\n                this.setState({errmsg: err})\r\n            }\r\n        )\r\n    }\r\n\r\n\r\n    render() {\r\n        const { forecast } = this.state\r\n        return (\r\n            <div>\r\n                <Currently forecast_currently = {forecast.currently}/> \r\n                <Daily forecast_daily = {forecast.daily}/> \r\n                <Hourly forecast_hourly = {forecast.hourly}/> \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Weather\r\n","import React, { Component } from 'react'\r\nimport Axios from 'axios';\r\nimport Weather from '../Weather/Weather';\r\n\r\nclass Home extends Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n    \r\n        this.state = {\r\n             addressVal: '',\r\n             errMsg: '',\r\n             lat: '',\r\n             lng:'',\r\n             viewWeatherComponent: false\r\n        }\r\n    }\r\n    handelAddressChange = (event) => {\r\n        this.setState({\r\n            addressVal: event.target.value,\r\n            viewWeatherComponent: false\r\n        })\r\n    }\r\n    getLatLng = (address) => {\r\n        Axios.get('https://maps.googleapis.com/maps/api/geocode/json?address=' + address +'&key=AIzaSyCXklgzyG5zQ73-qqUM0unNPgPSO7S0GNg')\r\n        .then(\r\n            response => {\r\n                this.setState({ \r\n                    lat: response.data.results[0].geometry.location.lat,\r\n                    lng: response.data.results[0].geometry.location.lng\r\n                })\r\n                this.setState({\r\n                    viewWeatherComponent: true\r\n                })\r\n                console.log(this.state.lat, this.state.lng)\r\n            }\r\n        ).catch(\r\n            error => this.setState({ errMsg: error})\r\n        )\r\n    }\r\n\r\n    \r\n\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <form>\r\n                    <label htmlFor=\"address\"> Address </label>\r\n                    <input name=\"address\" id=\"address\" value={this.state.addressVal} onChange={this.handelAddressChange}/>\r\n                    <button type=\"button\"\r\n                        onClick={()=>{\r\n                            this.getLatLng(this.state.addressVal)\r\n                            }}\r\n                    > Get Weather </button>\r\n                </form>\r\n                <hr />\r\n                {this.state.viewWeatherComponent && <Weather lat={this.state.lat} lng={this.state.lng} />}\r\n            </div>\r\n\r\n        )\r\n    }\r\n}\r\n\r\nexport default Home\r\n","import React from 'react';\n// import logo from './logo.svg';\nimport './App.css';\nimport Header from './components/Header/Header';\nimport Home from './components/Home/Home';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <Home />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}